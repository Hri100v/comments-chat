// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  body     String
  comments Comment[]
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  comments Comment[]
  Like     Like[]
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment   @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Comment[] @relation("ParentChild")
  parentId  String    @db.ObjectId
  Like      Like[]
}

model Like {
  user      User    @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId    String
  commentId String

  // @@id([userId, commentId])
  // @@unique([userId, commentId])
  // id @default([userId, commentId])
  // id @@id([userId, commentId])
  // @@id([userId, commentId])
  // @@id(fields: [userId, commentId], @map("_id"), db.ObjectId)
  // @@id(fields: [userId, commentId], name: "_likeId")
  // @@id(fields: [userId, commentId])
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

// model Post {
//   id       String    @id @default(uuid())
//   title    String
//   body     String
//   comments Comment[]
// }

// model User {
//   id       String    @id @default(uuid())
//   name     String
//   comments Comment[]
//   Like     Like[]
// }

// model Comment {
//   id        String    @id @default(uuid())
//   message   String
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    String
//   post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
//   postId    String
//   parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
//   children  Comment[] @relation("ParentChild")
//   parentId  String
//   Like      Like[]
// }

// model Like {
//   user      User    @relation(fields: [userId], references: [id])
//   comment   Comment @relation(fields: [commentId], references: [id])
//   userId    String
//   commentId String

//   @@id([userId, commentId])
// }
